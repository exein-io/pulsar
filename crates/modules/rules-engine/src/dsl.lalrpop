use validatron::{Operator, RelationalOperator, StringOperator, MultiOperator, RValue, Field, Identifier, Condition, AdtField, SimpleField, MethodCall};
use lalrpop_util::ParseError;

use super::{DslError, OptCheck};

grammar(variant: &str);

pub Condition: Condition = {
    <l:Condition> "AND" <r:SignedCondition> => Condition::And{l: Box::new(l), r: Box::new(r)},
    <l:Condition> "OR" <r:SignedCondition> => Condition::Or{l: Box::new(l), r: Box::new(r)},
    SignedCondition
}

SignedCondition: Condition = {
    "NOT" <b:SimpleCondition> => Condition::Not{inner: Box::new(b)},
    SimpleCondition
}

SimpleCondition: Condition = {
    <f: FieldPath> <op: Operator> <value: Value> => Condition::Binary {
        l: f,
        op,
        r: RValue::Value(value)
    },
    <f: FieldPath> <op: Operator> <value: FieldPath> => Condition::Binary {
        l: f,
        op,
        r: RValue::Identifier(value)
    },
    <f: FieldPath> "IN" <list: ValueList> =>? {
        let mut iterator = list.into_iter();

        let first = Condition::Binary {
            l: f.clone(),
            op: Operator::Relational(RelationalOperator::Equals),
            r: iterator.next().map(|x| RValue::Value(x)).ok_or(ParseError::User {
                error: DslError::EmptyList
            })?
        };
    
        let ret_val = iterator.fold(first, |acc, x| {
            Condition::Or {
                l: Box::new(acc),
                r: Box::new(Condition::Binary {
                    l: f.clone(),
                    op: Operator::Relational(RelationalOperator::Equals),
                    r: RValue::Value(x)
                })
            }
        });
    
        Ok(ret_val)
    },
    <f: FieldPath> => Condition::Unary(f),
    "(" <Condition> ")",
}

ValueList: Vec<String> = {
    "[" <Comma<Value>> "]" => <>
}

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

Value: String = {
    r#""([^"\\]|\\.)*""# => <>.trim_matches('"').to_string(),
    r"[0-9]+" => <>.to_string()
}

Operator: Operator = {
    // Relational
    "==" => Operator::Relational(RelationalOperator::Equals),
    "!=" => Operator::Relational(RelationalOperator::NotEquals),
    ">" => Operator::Relational(RelationalOperator::Greater),
    "<" => Operator::Relational(RelationalOperator::Less),
    ">=" => Operator::Relational(RelationalOperator::GreaterEqual),
    "<=" => Operator::Relational(RelationalOperator::LessEqual),
    // String
    "STARTS_WITH" => Operator::String(StringOperator::StartsWith),
    "ENDS_WITH" => Operator::String(StringOperator::EndsWith),
    // Multi
    "CONTAINS" => Operator::Multi(MultiOperator::Contains),
}

FieldPath: Vec<Identifier> = {
    <IdentSeq> =>? {
        let mut payload_subpath = false;

        let mut v = Vec::new();
        v.reserve(<>.len());

        let mut dotted_idents = <>.into_iter().enumerate();

        while let Some((index, value)) = dotted_idents.next() {
            match value {
                Identifier::MethodCall(mc) => {
                    if index == 0 {
                        return Err(ParseError::User {
                            error: DslError::FunctionCall
                        })
                    }

                    if dotted_idents.len() == 0 {
                        v.push(Identifier::MethodCall(mc));
                    } else {
                        return Err(ParseError::User {
                            error: DslError::MethodCallNotFinal
                        })
                    }
                }
                Identifier::Field(Field::Simple(SimpleField(value))) => {
                    if index == 0 && value == "payload" {
                        payload_subpath = true;
                    }

                    let identifier = if index == 1 && payload_subpath {
                        Identifier::Field(Field::Adt(AdtField { variant_name: variant.to_string(), field_name: value } ))
                    } else {
                        Identifier::Field(Field::Simple(SimpleField(value)))
                    }; 

                    v.push(identifier);
                }
                Identifier::Field(Field::Adt(field)) => {
                    if index == 0 {
                        return Err(ParseError::User {
                            error: DslError::AdtFirstField
                        })
                    }                    

                    v.push(Identifier::Field(Field::Adt(field)));
                }
            }
        }

        Ok(v)
    }
}

IdentSeq: Vec<Identifier> = {
    <v:(<Ident> <OptCheck?> ".")*> <e:Ident> => {
        let mut res = Vec::new();

        for (ident, opt_check) in v.into_iter() {
            res.push(ident);

            if opt_check.is_some() {
                 res.push(Identifier::Field(Field::Adt(AdtField {
                    variant_name: "Some".to_string(),
                    field_name: "0".to_string()
              })));
            }
        }

        res.push(e);

        res
    }
}

OptCheck: OptCheck = {
    "?" => OptCheck
}

Ident: Identifier = {
    r"[a-zA-Z]+\w*" => Identifier::Field(Field::Simple(SimpleField(<>.to_string()))),
    <r"[a-zA-Z]+\w*">"()" => Identifier::MethodCall(MethodCall{ name: <>.to_string() })
}

extern {
    type Error = DslError;
}