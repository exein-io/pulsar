use std::str::FromStr;
use crate::{Operator, Condition, Field, RelationalOperator, StringOperator, MultiOperator};

use lalrpop_util::ParseError;
use super::DslError;

grammar;

pub Condition: Condition = {
    <l:Condition> "AND" <r:SignedCondition> => Condition::And{l: Box::new(l), r: Box::new(r)},
    <l:Condition> "OR" <r:SignedCondition> => Condition::Or{l: Box::new(l), r: Box::new(r)},
    SignedCondition
}

SignedCondition: Condition = {
    "NOT" <b:BaseCondition> => Condition::Not{inner: Box::new(b)},
    BaseCondition
}

BaseCondition: Condition = {
    <f: Field> <op: Operator> <value: Value> => Condition::Base {
        field: f,
        op,
        value
    },
    <f: Field> "IN" <list: ValueList> =>? {
        let mut iterator = list.into_iter();

        let first = Condition::Base {
            field: f.clone(),
            op: Operator::Relational(RelationalOperator::Equals),
            value: iterator.next().ok_or(ParseError::User {
                error: DslError::EmptyList
            })?
        };
    
        let ret_val = iterator.fold(first, |acc, x| {
            Condition::Or {
                l: Box::new(acc),
                r: Box::new(Condition::Base {
                    field: f.clone(),
                    op: Operator::Relational(RelationalOperator::Equals),
                    value: x
                })
            }
        });
    
        Ok(ret_val)
    },
    "(" <Condition> ")",
}

ValueList: Vec<String> = {
    "[" <Comma<Value>> "]" => <>
}

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

Value: String = {
    r#"".[^\s]+""# => <>.trim_matches('"').to_string(),
    r"[0-9]+" => <>.to_string()
}

Operator: Operator = {
    // Relational
    "==" => Operator::Relational(RelationalOperator::Equals),
    "!=" => Operator::Relational(RelationalOperator::NotEquals),
    ">" => Operator::Relational(RelationalOperator::Greater),
    "<" => Operator::Relational(RelationalOperator::Less),
    ">=" => Operator::Relational(RelationalOperator::GreaterEqual),
    "<=" => Operator::Relational(RelationalOperator::LessEqual),
    // String
    "STARTS_WITH" => Operator::String(StringOperator::StartsWith),
    "ENDS_WITH" => Operator::String(StringOperator::EndsWith),
    // Multi
    "CONTAINS" => Operator::Multi(MultiOperator::Contains),
}

Field: Field = {
    <s: r"[a-zA-Z]\w+[\.[a-zA-Z]\w+]*"> =>? Field::from_str(<>)
        .map_err(|err| ParseError::User {
            error: DslError::Field {
                field: <>.to_string(),
                cause: err.to_string()
            }
        })
}

extern {
    type Error = DslError;
}